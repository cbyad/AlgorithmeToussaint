package com.cpa.algorithms;

import java.awt.Point;
import java.util.ArrayList;

import javafx.scene.shape.Line;

/**
 * 
 * @author cb_mac
 *Cette classe s'occupe de toutes les operations necessaires sur le calcul de l'enveloppe convexe
 */
public class Convex {

	
	public static ArrayList<Point> enveloppeConvexe(ArrayList<Point> points){
		if (points.size()<4) return points;

		Point ouest = points.get(0);
		Point sud = points.get(0);
		Point est = points.get(0);
		Point nord = points.get(0);
		for (Point p: points){
			if (p.x<ouest.x) ouest=p;
			if (p.y>sud.y) sud=p;
			if (p.x>est.x) est=p;
			if (p.y<nord.y) nord=p;
		}
		ArrayList<Point> result = new ArrayList<Point>();
		result.add(ouest);
		result.add(sud);
		result.add(est);
		result.add(nord);

		ArrayList<Point> rest = (ArrayList<Point>)points.clone();
		for (int i=0;i<rest.size();i++) {
			if (triangleContientPoint(ouest,sud,est,rest.get(i)) ||
					triangleContientPoint(ouest,est,nord,rest.get(i))) {
				rest.remove(i);
				i--;
			}
		}

		for (int i=0;i<result.size();i++) {
			Point a = result.get(i);
			Point b = result.get((i+1)%result.size());
			Point ref = result.get((i+2)%result.size());

			double signeRef = Utils.crossProduct(a,b,a,ref);
			double maxValue = 0;
			Point maxPoint = a;

			for (Point p: points) {
				double piki = Utils.crossProduct(a,b,a,p);
				if (signeRef*piki<0 && Math.abs(piki)>maxValue) {
					maxValue = Math.abs(piki);
					maxPoint = p;
				}
			}
			if (maxValue!=0){
				for (int j=0;j<rest.size();j++) {
					if (triangleContientPoint(a,b,maxPoint,rest.get(j))){
						rest.remove(j);
						j--;
					}
				}
				result.add(i+1,maxPoint);
				i--;
			}
		}
		return result;
	}

	/**
	 * 
	 * @param a
	 * @param b
	 * @param c
	 * @param x
	 * @return vrai si un triangle abc contient le point x , faux sinon
	 */
	public static boolean triangleContientPoint(Point a, Point b, Point c, Point x) {
		double l1 = ((b.y-c.y)*(x.x-c.x)+(c.x-b.x)*(x.y-c.y))/(double)((b.y-c.y)*(a.x-c.x)+(c.x-b.x)*(a.y-c.y));
		double l2 = ((c.y-a.y)*(x.x-c.x)+(a.x-c.x)*(x.y-c.y))/(double)((b.y-c.y)*(a.x-c.x)+(c.x-b.x)*(a.y-c.y));
		double l3 = 1-l1-l2;
		return (0<l1 && l1<1 && 0<l2 && l2<1 && 0<l3 && l3<1);
	}


	//-------------

	public static ArrayList<Line> calculPairesAntipodales(ArrayList<Point> points) {
		ArrayList<Point> p = enveloppeConvexe(points); // p est l'enveloppe convexe de points
		int n = p.size();
		ArrayList<Line> antipodales = new ArrayList<Line>();
		int k = 1;
		while (distance(p.get(k),p.get(n-1),p.get(0)) < distance(p.get((k+1)%n),p.get(n-1),p.get(0))) k++;
		int i = 0;
		int j = k;
		while (i<=k && j<n) {
			while (distance(p.get(j),p.get(i),p.get(i+1))<distance(p.get((j+1)%n),p.get(i),p.get(i+1)) && j<n-1) {
				antipodales.add(new Line(p.get(i).x,p.get(i).y,p.get(j).x,p.get(j).y));
				j++;
			}
			antipodales.add(new Line(p.get(i).x,p.get(i).y,p.get(j).x,p.get(j).y));
			i++;
		}
		return antipodales;
	}

	public static double distance(Point p, Point a, Point b) {
		return Math.abs(Utils.crossProduct(a,b,a,p));
	}

	//-----------------------------------

	//graham modifie
	public static ArrayList<Point> graham(ArrayList<Point> points){
		if (points.size()<4) return points;

		ArrayList<Point> result = pixelSort(points);
		for (int i=1;i<result.size()+2;i++) {
			Point p = result.get((i-1)%result.size());
			Point q = result.get(i%result.size());
			Point r = result.get((i+1)%(result.size()));
			if (Utils.crossProduct(p,q,p,r)>0) {
				result.remove(i%result.size());
				if (i==2) i=1;
				if (i>2) i-=2;
			}
		}
		return result;
	}


	//tri par pixel
	public static ArrayList<Point> pixelSort(ArrayList<Point> points){
		if (points.size()<4) return points;
		int maxX=points.get(0).x;
		for (Point p: points) if (p.x>maxX) maxX=p.x;
		Point[] maxY = new Point[maxX+1];
		Point[] minY = new Point[maxX+1];
		for (Point p: points) {
			if (maxY[p.x]==null||p.y>maxY[p.x].y) maxY[p.x]=p;
			if (minY[p.x]==null||p.y<minY[p.x].y) minY[p.x]=p;
		}
		ArrayList<Point> result = new ArrayList<Point>();
		for (int i=0;i<maxX+1;i++) if (maxY[i]!=null) result.add(maxY[i]);
		for (int i=maxX;i>=0;i--) if (minY[i]!=null && !result.get(result.size()-1).equals(minY[i])) result.add(minY[i]);

		if (result.get(result.size()-1).equals(result.get(0))) result.remove(result.size()-1);

		return result;
	}
}	  