package com.cpa.algorithms;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;


import javafx.scene.shape.Line;

/**
 * 
 * @author cb_mac
 *calcul de l'enveloppe convexe
 */
public class Convex {
	//
	//	public ArrayList<Point> enveloppeConvexeJarvis(ArrayList<Point> points){
	//
	//		if (points.size()<3) {
	//			return null;
	//		}
	//
	//		ArrayList<Point> enveloppe = new ArrayList<Point>();
	//		Point p = Utils.abscisseMin(points);
	//		Point pPrime = new Point(p);
	//
	//		for (Point q : points) {
	//			if (p.equals(q)) continue;
	//			boolean coteBleu=true;
	//
	//			for (Point x : points) {
	//				if(Utils.crossProduct(p, q, x)<0) coteBleu=false;
	//			}
	//
	//			if(coteBleu==true) { //On a [PQ] sur l'enveloppe convexe
	//
	//				boolean bolBoucle = true;
	//				enveloppe.add(p);
	//				while(bolBoucle){
	//
	//					Point r = points.get(0);
	//					double angleMin = Utils.calculAngle(p,q,q,r); //(pq,qr)
	//
	//					for (Point rmin : points) {
	//						if(!rmin.equals(q) && !rmin.equals(p)){
	//							if( Utils.calculAngle(p,q,q,rmin)<angleMin) 
	//							{
	//								r = rmin;
	//								angleMin=Utils.calculAngle(p,q,q,rmin);
	//							}
	//						}
	//					}//On a trouvÃ© R
	//					if(r.equals(pPrime)) bolBoucle = false;
	//					enveloppe.add(q);
	//					//enveloppe.add(r);
	//					p=q;
	//					q=r;
	//					//p=(Point)q.clone();
	//					//q=(Point)r.clone();
	//					
	//				}
	//				break;
	//			}
	//		}
	//		return enveloppe ; 
	//	}
	//----------------------------------

	public static ArrayList<Point> enveloppeConvexe(ArrayList<Point> points){
		if (points.size()<4) return points;

		Point ouest = points.get(0);
		Point sud = points.get(0);
		Point est = points.get(0);
		Point nord = points.get(0);
		for (Point p: points){
			if (p.x<ouest.x) ouest=p;
			if (p.y>sud.y) sud=p;
			if (p.x>est.x) est=p;
			if (p.y<nord.y) nord=p;
		}
		ArrayList<Point> result = new ArrayList<Point>();
		result.add(ouest);
		result.add(sud);
		result.add(est);
		result.add(nord);

		ArrayList<Point> rest = (ArrayList<Point>)points.clone();
		for (int i=0;i<rest.size();i++) {
			if (triangleContientPoint(ouest,sud,est,rest.get(i)) ||
					triangleContientPoint(ouest,est,nord,rest.get(i))) {
				rest.remove(i);
				i--;
			}
		}

		for (int i=0;i<result.size();i++) {
			Point a = result.get(i);
			Point b = result.get((i+1)%result.size());
			Point ref = result.get((i+2)%result.size());

			double signeRef = crossProduct(a,b,a,ref);
			double maxValue = 0;
			Point maxPoint = a;

			for (Point p: points) {
				double piki = crossProduct(a,b,a,p);
				if (signeRef*piki<0 && Math.abs(piki)>maxValue) {
					maxValue = Math.abs(piki);
					maxPoint = p;
				}
			}
			if (maxValue!=0){
				for (int j=0;j<rest.size();j++) {
					if (triangleContientPoint(a,b,maxPoint,rest.get(j))){
						rest.remove(j);
						j--;
					}
				}
				result.add(i+1,maxPoint);
				i--;
			}
		}
		return result;
	}


	public static boolean triangleContientPoint(Point a, Point b, Point c, Point x) {
		double l1 = ((b.y-c.y)*(x.x-c.x)+(c.x-b.x)*(x.y-c.y))/(double)((b.y-c.y)*(a.x-c.x)+(c.x-b.x)*(a.y-c.y));
		double l2 = ((c.y-a.y)*(x.x-c.x)+(a.x-c.x)*(x.y-c.y))/(double)((b.y-c.y)*(a.x-c.x)+(c.x-b.x)*(a.y-c.y));
		double l3 = 1-l1-l2;
		return (0<l1 && l1<1 && 0<l2 && l2<1 && 0<l3 && l3<1);
	}



	public static double crossProduct(Point p, Point q, Point s, Point t){
		return ((q.x-p.x)*(t.y-s.y)-(q.y-p.y)*(t.x-s.x));
	}

	//-------------

	public static ArrayList<Line> calculPairesAntipodales(ArrayList<Point> points) {
		ArrayList<Point> p = enveloppeConvexe(points); // p est l'enveloppe convexe de points
		int n = p.size();
		ArrayList<Line> antipodales = new ArrayList<Line>();
		int k = 1;
		while (distance(p.get(k),p.get(n-1),p.get(0)) < distance(p.get((k+1)%n),p.get(n-1),p.get(0))) k++;
		int i = 0;
		int j = k;
		while (i<=k && j<n) {
			while (distance(p.get(j),p.get(i),p.get(i+1))<distance(p.get((j+1)%n),p.get(i),p.get(i+1)) && j<n-1) {
				//antipodales.add(new Line(p.get(i),p.get(j)));
				antipodales.add(new Line(p.get(i).x,p.get(i).y,p.get(j).x,p.get(j).y));
				j++;
			}
			//antipodales.add(new Line(p.get(i),p.get(j)));
			antipodales.add(new Line(p.get(i).x,p.get(i).y,p.get(j).x,p.get(j).y));
			i++;
		}
		return antipodales;
	}

	public static double distance(Point p, Point a, Point b) {
		return Math.abs(crossProduct(a,b,a,p));
	}


	//-----------------------------------

	//graham modifi
	public static ArrayList<Point> graham(ArrayList<Point> points){
		if (points.size()<4) return points;

		ArrayList<Point> result = pixelSort(points);
		for (int i=1;i<result.size()+2;i++) {
			Point p = result.get((i-1)%result.size());
			Point q = result.get(i%result.size());
			Point r = result.get((i+1)%(result.size()));
			if (crossProduct(p,q,p,r)>0) {
				result.remove(i%result.size());
				if (i==2) i=1;
				if (i>2) i-=2;
			}
		}
		return result;
	}


	//tri par pixel
	public static ArrayList<Point> pixelSort(ArrayList<Point> points){
		if (points.size()<4) return points;
		int maxX=points.get(0).x;
		for (Point p: points) if (p.x>maxX) maxX=p.x;
		Point[] maxY = new Point[maxX+1];
		Point[] minY = new Point[maxX+1];
		for (Point p: points) {
			if (maxY[p.x]==null||p.y>maxY[p.x].y) maxY[p.x]=p;
			if (minY[p.x]==null||p.y<minY[p.x].y) minY[p.x]=p;
		}
		ArrayList<Point> result = new ArrayList<Point>();
		for (int i=0;i<maxX+1;i++) if (maxY[i]!=null) result.add(maxY[i]);
		for (int i=maxX;i>=0;i--) if (minY[i]!=null && !result.get(result.size()-1).equals(minY[i])) result.add(minY[i]);

		if (result.get(result.size()-1).equals(result.get(0))) result.remove(result.size()-1);

		return result;
	}



	//--------------------------------super graham avec trie -------------------------------------

	protected static enum Turn { CLOCKWISE, COUNTER_CLOCKWISE, COLLINEAR }

	protected static boolean areAllCollinear(List<Point> points) {

		if(points.size() < 2) {
			return true;
		}

		final Point a = points.get(0);
		final Point b = points.get(1);

		for(int i = 2; i < points.size(); i++) {

			Point c = points.get(i);

			if(getTurn(a, b, c) != Turn.COLLINEAR) {
				return false;
			}
		}

		return true;
	}

	public static List<Point> getConvexHull(ArrayList<Point> points) throws IllegalArgumentException {

		List<Point> sorted = new ArrayList<Point>(getSortedPointSet(points));

		if(sorted.size() < 3) {
			throw new IllegalArgumentException("can only create a convex hull of 3 or more unique points");
		}

		if(areAllCollinear(sorted)) {
			throw new IllegalArgumentException("cannot create a convex hull from collinear points");
		}

		Stack<Point> stack = new Stack<Point>();
		stack.push(sorted.get(0));
		stack.push(sorted.get(1));

		for (int i = 2; i < sorted.size(); i++) {

			Point head = sorted.get(i);
			Point middle = stack.pop();
			Point tail = stack.peek();

			Turn turn = getTurn(tail, middle, head);

			switch(turn) {
			case COUNTER_CLOCKWISE:
				stack.push(middle);
				stack.push(head);
				break;
			case CLOCKWISE:
				i--;
				break;
			case COLLINEAR:
				stack.push(head);
				break;
			}
		}

		stack.push(sorted.get(0));

		return new ArrayList<Point>(stack);
	}

	protected static Point getLowestPoint(ArrayList<Point> points) {

		Point lowest = points.get(0);

		for(int i = 1; i < points.size(); i++) {

			Point temp = points.get(i);

			if(temp.y < lowest.y || (temp.y == lowest.y && temp.x < lowest.x)) {
				lowest = temp;
			}
		}

		return lowest;
	}

	protected static Set<Point> getSortedPointSet(ArrayList<Point> points) {

		final Point lowest = getLowestPoint(points);

		TreeSet<Point> set = new TreeSet<Point>(new Comparator<Point>() {
			@Override
			public int compare(Point a, Point b) {

				if(a.equals(b)|| a==b) {
					return 0;
				}

				double thetaA = Math.atan2((long)a.y - lowest.y, (long)a.x - lowest.x);
				double thetaB = Math.atan2((long)b.y - lowest.y, (long)b.x - lowest.x);

				if(thetaA < thetaB) {
					return -1;
				}
				else if(thetaA > thetaB) {
					return 1;
				}
				else {
					double distanceA = Math.sqrt((((long)lowest.x - a.x) * ((long)lowest.x - a.x)) +
							(((long)lowest.y - a.y) * ((long)lowest.y - a.y)));
					double distanceB = Math.sqrt((((long)lowest.x - b.x) * ((long)lowest.x - b.x)) +
							(((long)lowest.y - b.y) * ((long)lowest.y - b.y)));

					if(distanceA < distanceB) {
						return -1;
					}
					else {
						return 1;
					}
				}
			}
		});

		set.addAll(points);

		return set;
	}

	protected static Turn getTurn(Point a, Point b, Point c) {

		double crossProduct = Utils.crossProduct(a, b, c);

		if(crossProduct > 0) {
			return Turn.COUNTER_CLOCKWISE;
		}
		else if(crossProduct < 0) {
			return Turn.CLOCKWISE;
		}
		else {
			return Turn.COLLINEAR;
		}
	}

}	  