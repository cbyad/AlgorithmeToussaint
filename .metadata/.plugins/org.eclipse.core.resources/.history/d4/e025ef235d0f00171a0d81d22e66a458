package com.cpa.compute;

import java.awt.Point;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;

import com.cpa.algorithms.Convex;
import com.cpa.algorithms.Utils;
import com.cpa.algorithms.Ritter;
import com.cpa.algorithms.Toussaint;
import com.cpa.tools.LoadInstance;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.StrokeLineCap;
import javafx.stage.Stage;

public class GraphicView extends Application {

	@Override
	public void start(Stage primaryStage) {

		ArrayList<Point> points = LoadInstance.readFile("samples/test-647.points");

		Circle cercle =Ritter.calculCercleMinRitter(points);// calcul ritter

		ArrayList<Point> pointConvex = Convex.graham(points); // enveloppe convexe

		ArrayList<Line> paireAntiPodales = Convex.calculPairesAntipodales(pointConvex) ;

		Point2D.Double[] minimum = Toussaint.AlgorithmeRectangleMinimun(paireAntiPodales, pointConvex);

		int number = 1;

		List<Point> p = new ArrayList<>();
		
		for(Point2D.Double point : minimum) {
			Point p1= new Point((int)point.x, (int)point.y);
			p.add(p1);
			System.out.printf("Point[%d] (%.1f, %.1f)%n", number++, point.x, point.y);
		}

		
		Polygon rec = new Polygon();
		p.forEach(e ->{rec.getPoints().add((double) e.x);rec.getPoints().add((double)e.y);});
		rec.setStroke(Color.CHARTREUSE);
		rec.setFill(Color.CORNFLOWERBLUE);
		rec.setStrokeLineCap(StrokeLineCap.SQUARE);
		rec.setStrokeWidth(2);

		
		cercle.setFill(Color.DARKGOLDENROD);
		cercle.setStroke(Color.BLACK);
		cercle.setStrokeWidth(2);


		Polygon poly  = new Polygon();
		poly.setFill(Color.BLANCHEDALMOND);
		poly.setStroke(Color.BLACK);
		poly.setStrokeWidth(2);
		pointConvex.forEach(e ->{poly.getPoints().add((double) e.x) ;poly.getPoints().add((double) e.y); });

		Group root = new Group();

		root.getChildren().add(cercle);
		root.getChildren().add(rec);
		root.getChildren().add(poly);
		root.getChildren().addAll(Convex.calculPairesAntipodales(pointConvex));
		root.getChildren().addAll(drawPointOnScreen(points));
		
		Label circleArea = new Label("Area circle= "+Utils.circleArea(cercle.getRadius()));
		Label polyArea = new Label("Area polygon= "+Utils.polygonArea(pointConvex));
		Label recArea = new Label("Area rectangle="+ Utils.rectangleArea(minimum));
		Label qualiteCP = new Label("Qualite C/P= "+Utils.qualityPoly_circle(pointConvex, cercle));
		Label qualiteRP = new Label("Qualite R/P= "+Utils.qualityPoly_rectangle(pointConvex, minimum));
		polyArea.setTranslateY(20);
		qualiteCP.setTranslateY(40);
		recArea.setTranslateY(60);
		
		circleArea.setTextFill(Color.WHITE);
		polyArea.setTextFill(Color.WHITE);
		recArea.setTextFill(Color.WHITE);
		qualiteCP.setTextFill(Color.WHITE);
		
//		root.getChildren().add(circleArea);
//		root.getChildren().add(polyArea);
//		root.getChildren().add(recArea);
		//root.getChildren().add(qualite);
		
		Scene scene = new Scene(root);
		scene.setFill(Color.CADETBLUE);
		//scene.setFill(Color.WHITE);
		primaryStage.setTitle("---Algorithm Toussaint---");
		primaryStage.setScene(scene);
		primaryStage.setHeight(600);
		primaryStage.setWidth(800);
		primaryStage.show();
		primaryStage.setOnCloseRequest(e -> Platform.exit());
	}

	public static void main(String[] args) {

		launch(args);
	}

	/*
	 * 
	 * Cette methode permet de dessiner les points
	 */
	ArrayList<Circle> drawPointOnScreen(ArrayList<Point> points){
		ArrayList<Circle> result = new ArrayList<Circle>();
		
		for (Point p : points) {
			result.add(new Circle(p.x, p.y,2,Color.RED));
		}
		return result ;

	}

}
